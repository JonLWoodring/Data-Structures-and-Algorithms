/*
*Jon Woodring
*Professor Haynes
*11/28/2016
*https://github.com/JonLWoodring/Data-Structures-and-Algorithms/BuildPriorityQueueCalculateOldest
*/
public class PriorityQueue
{
	static int count = 0;
	public static void main(String[] args)
	{
		int[] insertedValues = {1, 7, 3, 4, 5, 6, 1, 2, 3};
	
		Node oldestData = oldestData(insertedValues);
		System.out.println("The data at " + oldestData.getData() + ", is the oldest data with timestamp " + oldestData.getTS());
		
	}
	public static Node buildQueue(int[] array)
	{
		Node root = new Node(array[0]);
		Node p = root;
		root.setTS(0);
		Node q;
		for(int x = 1; x < array.length; x++)
		{
			count++;
			p = root;
			Node next = new Node(array[x]);
			next.setTS(count);
			if(next.getData() <= root.getData())
			{
				next.setNext(root);
				root.setLast(next);
				root = next;
				
			}
			else if(next.getData() > root.getData())
			{
				while(next.getData() >= p.getData())
				{
					if(p.getNext() == null)
					{
						break;
					}
					p = p.getNext();	
					
				}
				if(p.getNext() == null && next.getData() > p.getData())
				{
					p.setNext(next);
					next.setLast(p);
					next.setNext(null);
				}
				else
				{
					q = p.getLast();
					q.setNext(next);
					p.setLast(next);
					next.setNext(p);
					next.setLast(q);
				}
			}
		}
			return root; 
	
	}
	public static Node oldestData(int[] insertedValues)
	{
		
		Node root = buildQueue(insertedValues);
		Node oldest = root;
		Node t = root;
		int currVal = count - t.getTS();
		oldest.setTS(currVal);
		Node u;
		for(int x = 1; x < insertedValues.length; x++)
		{
			
			count++;
			t = t.getNext();
			u = t.getLast();
			u.setNext(null);
			u.setLast(null);
			root = t;
			currVal = count - t.getTS();
			if(currVal > oldest.getTS())
			{
				oldest = t;
				oldest.setTS(currVal);
				oldest.setData(t.getData());
			}

		}
		return oldest;
	}
}
