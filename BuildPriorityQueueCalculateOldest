public class PriorityQueue
{
	public static void main(String[] args)
	{
		int[] insertedValues = {1, 7, 3, 4, 5, 6, 1, 2, 3};
	
		buildQueueCalcOldest(insertedValues);
		
	}
	public static void buildQueueCalcOldest(int[] array)
	{
		Node root = new Node(array[0]);
		Node p = root;
		int count = 0;
		root.setTS(0);
		Node q;
		for(int x = 1; x < array.length; x++)
		{
			count++;
			p = root;
			Node next = new Node(array[x]);
			next.setTS(count);
			if(next.getData() <= root.getData())
			{
				next.setNext(root);
				root.setLast(next);
				root = next;
				
			}
			else if(next.getData() > root.getData())
			{
				while(next.getData() >= p.getData())
				{
					if(p.getNext() == null)
					{
						break;
					}
					p = p.getNext();	
					
				}
				if(p.getNext() == null && next.getData() > p.getData())
				{
					p.setNext(next);
					next.setLast(p);
					next.setNext(null);
				}
				else
				{
					q = p.getLast();
					q.setNext(next);
					p.setLast(next);
					next.setNext(p);
					next.setLast(q);
				}
			}
		}
		count++;
		Node oldest = root;
		Node t = root;
		int currVal = count - t.getTS();
		oldest.setTS(currVal);
		for(int x = 1; x < array.length; x++)
		{
			count++;
			t = t.getNext();
			currVal = count - t.getTS();
			if(currVal > oldest.getTS())
			{
				oldest = t;
				oldest.setTS(currVal);
				oldest.setData(t.getData());
			}

		}
		System.out.println("The oldest element is " + oldest.getData() + ", with timestamp " + oldest.getTS());
	}
}
	
